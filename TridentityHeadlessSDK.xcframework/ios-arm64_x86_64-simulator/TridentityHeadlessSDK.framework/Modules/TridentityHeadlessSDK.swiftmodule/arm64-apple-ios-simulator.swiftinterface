// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TridentityHeadlessSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreData
import CoreGraphics
import CoreLocation
import CoreTelephony
import CoreText
import CryptoKit
import Darwin
import Foundation
import LocalAuthentication
import MachO
import MessageUI
import QuartzCore
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension QuartzCore.CALayer {
  public func logLayerTree(withIndent: Swift.Int = 0)
}
public protocol FBInterfaceMessaging {
  func processFCM(notificationInfo userInfo: [Swift.AnyHashable : Any], clientInfo: TridentityHeadlessSDK.ClientConfig?, navigation: UIKit.UINavigationController?)
}
public protocol TransactionInfo {
  var amount: Swift.String? { get }
  var merchantName: Swift.String? { get }
  var productId: Swift.String? { get }
  var timeStamp: Swift.Double { get }
  var expTimeStamp: Swift.Double { get }
  var type: Swift.String? { get }
  var transactionId: Swift.String? { get }
  var requesterTxnId: Swift.String? { get }
  var authenticationType: Swift.String? { get }
}
public protocol TransactionPayment {
  associatedtype Info : TridentityHeadlessSDK.TransactionInfo
  var transaction: Self.Info { get }
  var paymentStatus: TridentityHeadlessSDK.PushStatus { get }
}
@objc public class ClientConfig : ObjectiveC.NSObject {
  @objc public init(_ clientID: Swift.String, appID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TridentityHeadlessSDKInterface : ObjectiveC.NSObject {
  @objc public static var shared: TridentityHeadlessSDK.TridentityHeadlessSDKInterface
  @objc public func configureSDK(jsonObject: [Swift.String : Any], completionHandler: @escaping (Swift.Bool, [Swift.String : Any]) -> Swift.Void)
  @objc public func registerFCM(fcmToken: Swift.String, statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc public func initializeSDK()
  @objc public func checkRegistrationStatus(jsonObject: [Swift.String : Swift.String], completionHandler: @escaping ([Swift.String : Any]) -> Swift.Void)
  @objc public func getFeatures(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc public func processTransaction(jsonObject: [Swift.String : Swift.String], statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc public func fetchTransactionHistory(jsonObject: [Swift.String : Any], statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc public func deRegisterUser(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc deinit
}
extension TridentityHeadlessSDK.TridentityHeadlessSDKInterface {
  @objc dynamic public func getOfflineOtp(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func getConsentEligibility(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func fetchTnc(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func updateConsent(jsonObject: [Swift.String : Swift.String], statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func getSMSToken(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func failedToSendSmS(statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
  @objc dynamic public func intiateSimBinding(jsonObject: [Swift.String : Any], viewController: UIKit.UIViewController, statusDelegate: any TridentityHeadlessSDK.HeadlessSDKProtocol)
}
public enum KeyChainKey : Swift.String, Swift.Codable {
  case clientId
  case secretKey
  case apiKey
  case customerId
  case consentId
  case featureId
  case aesKey
  case offlineOtp
  case deviceUUID
  case simID
  case payloadSecretKey
  case clientServerPubkey
  case clientToken
  case clientExpiry
  case enviroment
  case biomtricPopupShown
  case appId
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol TridentSDKDelegate {
  @objc func fetchStatus(data: [Swift.String : Any])
  @objc func showCustomerStatus(message: Swift.String)
}
@objc public protocol HeadlessSDKProtocol {
  @objc func sdkStatusUpdate(data: [Swift.String : Any])
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let SDKReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public func base32Encode(_ data: Foundation.Data) -> Swift.String
public func base32HexEncode(_ data: Foundation.Data) -> Swift.String
public func base32DecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32HexDecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32Encode(_ array: [Swift.UInt8]) -> Swift.String
public func base32HexEncode(_ array: [Swift.UInt8]) -> Swift.String
public func base32Decode(_ string: Swift.String) -> [Swift.UInt8]?
public func base32HexDecode(_ string: Swift.String) -> [Swift.UInt8]?
extension Swift.String {
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32EncodedString: Swift.String {
    get
  }
  public func base32DecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public func base32HexDecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
}
extension Foundation.Data {
  public var base32EncodedString: Swift.String {
    get
  }
  public var base32EncodedData: Foundation.Data {
    get
  }
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public var base32HexEncodedData: Foundation.Data {
    get
  }
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
}
final public class TDYFloatValueProvider {
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  public init(block: @escaping TridentityHeadlessSDK.TDYFloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  final public var valueType: any Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
public class TDYAsset : Swift.Codable {
  final public let id: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Foundation.Data {
  public var bytes: [Swift.UInt8] {
    get
  }
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
@_hasMissingDesignatedInitializers public class KeyChain {
  public static let shareKC: TridentityHeadlessSDK.KeyChain
  public func appKeys() -> [Swift.String]
  public func userKeys() -> [Swift.String]
  public func allKeys() -> [Swift.String]
  public func removeAll() -> Swift.Bool
  @objc deinit
}
public enum WibmoAuthenticatorError : Swift.Error {
  public var domain: Swift.String {
    get
  }
  public enum RegisterFailedReason {
    case pvcRetry
    case bindingFailed
    case smsSendError(reason: TridentityHeadlessSDK.WibmoAuthenticatorError.SmsSendFailureReason)
    case invalidToken
    case mobileNumberMismatch
  }
  public enum ConnectionFailureReason {
    case noInternetAccess
    case apiTokenExpired
    public static func == (a: TridentityHeadlessSDK.WibmoAuthenticatorError.ConnectionFailureReason, b: TridentityHeadlessSDK.WibmoAuthenticatorError.ConnectionFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ServerResponseFailure {
    case serverError(Swift.String?)
  }
  public enum SmsSendFailureReason {
    case cancelled
    case failed
    case notAvailable
    case invalidToken
    case eventTimeout
    public static func == (a: TridentityHeadlessSDK.WibmoAuthenticatorError.SmsSendFailureReason, b: TridentityHeadlessSDK.WibmoAuthenticatorError.SmsSendFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case connectionError(reason: TridentityHeadlessSDK.WibmoAuthenticatorError.ConnectionFailureReason)
  case serverResponse(reason: TridentityHeadlessSDK.WibmoAuthenticatorError.ServerResponseFailure)
  case unknownError
  case tokenExpired
  case registerFailed(reason: TridentityHeadlessSDK.WibmoAuthenticatorError.RegisterFailedReason)
  case failedByReason(Swift.String)
  case updateTrnxFailed(reason: Swift.String)
}
extension TridentityHeadlessSDK.WibmoAuthenticatorError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol NotificationState : AnyObject {
  func doClearNotification(_ trnxID: Swift.String?)
  func recievedNotification(_ trnxID: Swift.String?)
}
public struct PushTransactionConvertor {
  public static func makeTransactionDetail(fromPushInfo userInfo: [Swift.AnyHashable : Any]) -> TridentityHeadlessSDK.TransactionDetail?
}
public enum TDYOTPAlgorithm {
  case sha1
  case sha256
  case sha512
  public static func == (a: TridentityHeadlessSDK.TDYOTPAlgorithm, b: TridentityHeadlessSDK.TDYOTPAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class TransactionDetail : ObjectiveC.NSObject {
  public var amount: Swift.String
  public var merchantName: Swift.String
  public var timeStamp: Swift.Double
  public var expTimeStamp: Swift.Double
  public var type: Swift.String?
  public var transactionId: Swift.String
  public var authenticationType: Swift.String
  public var expireTimer: Foundation.Timer?
  @objc deinit
}
public struct TDYHOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let algorithm: TridentityHeadlessSDK.TDYOTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, algorithm: TridentityHeadlessSDK.TDYOTPAlgorithm = .sha1)
  public func generate(counter: Swift.UInt64) -> Swift.String?
}
public enum PushStatus : Swift.String, Swift.Codable {
  case accept
  case decline
  case expired
  case cancelled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias URLString = Swift.String
public func print(_ items: Swift.String..., function: Swift.String = #function, separator: Swift.String = " ", terminator: Swift.String = "\n")
extension Swift.Array where Element == Swift.UInt8 {
  public func toHexString() -> Swift.String
}
public struct TDYTOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let timeInterval: Swift.Int
  public let algorithm: TridentityHeadlessSDK.TDYOTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, timeInterval: Swift.Int = 30, algorithm: TridentityHeadlessSDK.TDYOTPAlgorithm = .sha1)
  public func generate(time: Foundation.Date) -> Swift.String?
  public func generate(secondsPast1970: Swift.Int) -> Swift.String?
}
@objc public class TDYTokenValidateResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol AuthenticatorTheme {
  var primaryColor: UIKit.UIColor { get }
  var secondaryColor: UIKit.UIColor { get }
  var backgroundColor: UIKit.UIColor { get }
  var navigationBar: UIKit.UIColor { get }
  var bottomBar: UIKit.UIColor { get }
}
extension TridentityHeadlessSDK.KeyChainKey : Swift.Equatable {}
extension TridentityHeadlessSDK.KeyChainKey : Swift.Hashable {}
extension TridentityHeadlessSDK.KeyChainKey : Swift.RawRepresentable {}
extension TridentityHeadlessSDK.WibmoAuthenticatorError.ConnectionFailureReason : Swift.Equatable {}
extension TridentityHeadlessSDK.WibmoAuthenticatorError.ConnectionFailureReason : Swift.Hashable {}
extension TridentityHeadlessSDK.WibmoAuthenticatorError.SmsSendFailureReason : Swift.Equatable {}
extension TridentityHeadlessSDK.WibmoAuthenticatorError.SmsSendFailureReason : Swift.Hashable {}
extension TridentityHeadlessSDK.TDYOTPAlgorithm : Swift.Equatable {}
extension TridentityHeadlessSDK.TDYOTPAlgorithm : Swift.Hashable {}
extension TridentityHeadlessSDK.PushStatus : Swift.Equatable {}
extension TridentityHeadlessSDK.PushStatus : Swift.Hashable {}
extension TridentityHeadlessSDK.PushStatus : Swift.RawRepresentable {}
